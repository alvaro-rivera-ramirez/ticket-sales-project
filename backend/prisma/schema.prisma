// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
  roleId Int @id @default(autoincrement()) @map("role_id")
  name String @db.VarChar(40)
  users User[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  userId      Int      @id @default(autoincrement()) @map("user_id")
  dni String @db.VarChar(10) @unique
  firstname    String @db.VarChar(200)
  lastname String @db.VarChar(200)
  email   String   @unique
  password String @db.VarChar(255)
  phone String? @db.VarChar(40)
  role    Role     @relation(fields: [roleId],references: [roleId])
  roleId Int
  payments Payment[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryEvent{
  categoryEventId Int @id @default(autoincrement()) @map("category_event_id")
  name String @db.VarChar(40)
  events Event[]
}

model Event{
  eventId Int @id @default(autoincrement()) @map("event_id")
  category CategoryEvent @relation(fields: [categoryId],references: [categoryEventId])
  categoryId Int
  startDate DateTime
  endDate DateTime
  title String @db.VarChar(100)
  description String
  scheduleImg String @db.VarChar(255)
  bannerImg String @db.VarChar(255)
  capacity Int
  stagePartsImg String @db.VarChar(255)
  stage Stage @relation(fields: [stageId],references: [stageId])
  stageId Int
  payments Payment[]
  stageSections StageSection[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country{
  countryId Int @id @default(autoincrement()) @map("country_id")
  name String @db.VarChar(40)
  stages Stage[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage{
  stageId Int @id @default(autoincrement()) @map("stage_id")
  country Country @relation(fields: [countryId],references: [countryId])
  countryId Int
  name String @db.VarChar(100)
  capacity Int
  address String @db.VarChar(255)
  addressReferences String? @db.VarChar(100)
  stageSections StageSection[]
  events Event[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StageSection{
  stageSectionId Int @id @default(autoincrement()) @map("stage_section_id")
  name String @db.VarChar(100)
  capacity Int
  price Decimal
  stage Stage @relation(fields: [stageId],references: [stageId])
  stageId Int
  event Event @relation(fields: [eventId],references: [eventId])
  eventId Int
  paymentDetails PaymentDetail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod{
  paymentMethodId Int @id @default(autoincrement()) @map("payment_method_id")
  name String @db.VarChar(40)
  payments Payment[]
}

model Payment{
  paymentId Int @id @default(autoincrement()) @map("payment_id")
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId],references: [paymentMethodId])
  paymentMethodId Int
  user User @relation(fields: [userId],references: [userId])
  userId Int
  event Event @relation(fields: [eventId],references: [eventId])
  eventId Int
  paymentDetails PaymentDetail[]
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentDetail{
  paymentDetailId Int @id @default(autoincrement()) @map("payment_detail_id")
  stageSection StageSection @relation(fields: [stageSectionId],references: [stageSectionId])
  stageSectionId Int
  payment Payment @relation(fields: [paymentId],references: [paymentId])
  paymentId Int
  quantity Int
  unitPrice Decimal
  active  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


